---
import { getCollection } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import LinkButton from "@components/LinkButton.astro";
import Hr from "@components/Hr.astro";
import Card from "@components/Card";
import Socials from "@components/Socials.astro";
import getSortedPosts from "@utils/getSortedPosts";
import { SITE, SOCIALS } from "@config";

const posts = await getCollection("blog");

const sortedPosts = getSortedPosts(posts);
const featuredPosts = sortedPosts.filter(({ data }) => data.featured);
const recentPosts = sortedPosts.filter(({ data }) => !data.featured);

const socialCount = SOCIALS.filter(social => social.active).length;
---
<!--<link rel="stylesheet" type="text/css" href="/vit.css"/>-->
<link rel="stylesheet" type="text/css" href="https://votinginfotool.org/css/compiled/vit.css"/>
<script is:inline src="/app.js"></script>

<Layout>
  <Header />
  <main id="main-content">
    <section id="hero">
      <h1>Accessible Voting Platform</h1>

      <p>
        Welcome! For more info, please check out the About page.
      </p>

      <!-- Voting Information Tool -->
      <div class="override_text" id="_vit" style="width: 100%; height: 480px;"></div>

    </section>

    <Hr />

  </main>
</Layout>

<!-- Embed Voting Information Tool -->
<script>
  var config = {
    "title": {"en":"Voting Information Tool"},
    "embedded-line1": {"en":"Find out where to vote."},
    "embedded-line2-hidden": true,
    "embedded-line3-hidden": true,
    "logo": {"type":"default"},
    "official-only": true
    };
    var loadVIT = function () {
      if (typeof vit !== 'undefined'){
        vit.core.init("_vit", config);
        } else {
        setTimeout(loadVIT, 500);
        }
      };

    // Wait until the entire page (and external scripts) is loaded before initializing VIT
    window.addEventListener('load', function() {
      loadVIT();
      });

</script>

<!-- Google Places and Civic Information API Script -->
<!--<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCTZXc4AZ6jNUz66g3znltxOO5UbhROa-M&libraries=places"></script>-->
<!--<script>-->
<!--  // Initialize Google Places Autocomplete for the address input field-->
<!--  function initAutocomplete() {-->
<!--    const addressInput = document.getElementById('address');-->
<!--    const autocomplete = new google.maps.places.Autocomplete(addressInput);-->

<!--    autocomplete.setFields(['address_components', 'geometry']);-->

<!--    // When a place is selected, fetch details-->
<!--    autocomplete.addListener('place_changed', function() {-->
<!--      const place = autocomplete.getPlace();-->
<!--      console.log('Place details:', place); // You can use this to get address details if needed-->
<!--    });-->
<!--  }-->

<!--  // Fetch polling locations from the Google Civic Information API-->
<!--  async function getPollingLocations(address) {-->
<!--    const apiKey = 'AIzaSyCv_ndkQGpFSPIOc-cb0VU-vwTFbBBi_oc';-->
<!--    // const url = `https://www.googleapis.com/civicinfo/v2/voterinfo?key=${apiKey}&address=${encodeURIComponent(address)}&electionId=9000`;-->
<!--    const url = `https://www.googleapis.com/civicinfo/v2/voterinfo?key=${apiKey}&address=${encodeURIComponent(address)}&electionId=2000`;-->

<!--    try {-->
<!--      const response = await fetch(url);-->
<!--      const data = await response.json();-->
<!--      displayPollingLocations(data);-->
<!--    } catch (error) {-->
<!--      console.error('Error fetching polling locations:', error);-->
<!--    }-->
<!--  }-->

<!--  // Display the polling locations or relevant data in the div-->
<!--  function displayPollingLocations(data) {-->
<!--    const pollingInfoDiv = document.getElementById('polling-info');-->

<!--    if (data && data.pollingLocations && data.pollingLocations.length > 0) {-->
<!--      // Example of showing polling location data-->
<!--      const locationsHtml = data.pollingLocations.map(location => `-->
<!--        <div>-->
<!--          <h3>Polling Location: ${location.address.locationName}</h3>-->
<!--          <p>Address: ${location.address.line1}, ${location.address.city}, ${location.address.state}, ${location.address.zip}</p>-->
<!--        </div>-->
<!--      `).join('');-->

<!--      pollingInfoDiv.innerHTML = locationsHtml;-->
<!--    } else {-->
<!--      pollingInfoDiv.innerHTML = '<p>No polling locations found for this address.</p>';-->
<!--    }-->
<!--  }-->

<!--  // Handle the form submission-->
<!--  const form = document.getElementById('address-form');-->
<!--  form.addEventListener('submit', function (event) {-->
<!--    event.preventDefault();-->
<!--    const address = document.getElementById('address').value;-->
<!--    getPollingLocations(address);-->
<!--  });-->

<!--  // Initialize the Google Places Autocomplete when the page loads-->
<!--  window.onload = function() {-->
<!--    initAutocomplete();-->
<!--  };-->
<!--</script>-->

<style>
  #_vit__main-panel * {
      font-family: IBM Plex Mono, monospace !important;
  }

  /* ===== Hero Section ===== */
  #hero {
    @apply pb-6 pt-8;
  }
  #hero h1 {
    @apply my-4 inline-block text-3xl font-bold sm:my-8 sm:text-5xl;
  }
  #hero .rss-link {
    @apply mb-6;
  }
  #hero .rss-icon {
    @apply mb-2 h-6 w-6 scale-110 fill-skin-accent sm:mb-3 sm:scale-125;
  }
  #hero p {
    @apply my-2;
  }
  .social-wrapper {
    @apply mt-4 flex flex-col sm:flex-row sm:items-center;
  }
  .social-links {
    @apply mb-1 mr-2 whitespace-nowrap sm:mb-0;
  }

  /* ===== Featured & Recent Posts Sections ===== */
  #featured,
  #recent-posts {
    @apply pb-6 pt-12;
  }
  #featured h2,
  #recent-posts h2 {
    @apply text-2xl font-semibold tracking-wide;
  }
  .all-posts-btn-wrapper {
    @apply my-8 text-center;
  }


</style>
